From 1328e7819a6bd8bf9e50a74eba0125a381d49bf0 Mon Sep 17 00:00:00 2001
From: Steffen Sledz <sledz@dresearch-fe.de>
Date: Wed, 27 Jan 2016 15:17:32 +0100
Subject: [PATCH] phys_mem_allocator refcountig mmap fix, HYP-12917

Signed-off-by: Sascha Dierberg <dierberg@dresearch-fe.de>

---
 src/common/phys_mem_allocator.c | 57 +++++++++++++++++++----------------------
 src/common/phys_mem_allocator.h |  4 ++-
 src/ipu/allocator.c             | 56 +++++++++++++++++++++++++---------------
 3 files changed, 65 insertions(+), 52 deletions(-)

diff --git a/src/common/phys_mem_allocator.c b/src/common/phys_mem_allocator.c
index a454bec..6451b95 100644
--- a/src/common/phys_mem_allocator.c
+++ b/src/common/phys_mem_allocator.c
@@ -102,7 +102,7 @@ static void gst_imx_phys_mem_allocator_finalize(GObject *object)
 static GstImxPhysMemory* gst_imx_phys_mem_new_internal(GstImxPhysMemAllocator *phys_mem_alloc, GstMemory *parent, gsize maxsize, GstMemoryFlags flags, gsize align, gsize offset, gsize size)
 {
 	GstImxPhysMemory *phys_mem;
-	phys_mem = g_slice_alloc(sizeof(GstImxPhysMemory));
+	phys_mem = g_slice_alloc0(sizeof(GstImxPhysMemory));
 	if (phys_mem == NULL)
 	{
 		GST_ERROR_OBJECT(phys_mem_alloc, "could not allocate memory for physmem structure");
@@ -111,7 +111,8 @@ static GstImxPhysMemory* gst_imx_phys_mem_new_internal(GstImxPhysMemAllocator *p
 
 	phys_mem->mapped_virt_addr = NULL;
 	phys_mem->phys_addr = 0;
-	phys_mem->mapping_refcount = 0;
+	g_atomic_int_set(&phys_mem->mapping_refcount, 0);
+	g_mutex_init(&phys_mem->mutex);
 	phys_mem->internal = NULL;
 
 	gst_memory_init(GST_MEMORY_CAST(phys_mem), flags, GST_ALLOCATOR_CAST(phys_mem_alloc), parent, maxsize, align, offset, size);
@@ -185,8 +186,17 @@ static void gst_imx_phys_mem_allocator_free(GstAllocator *allocator, GstMemory *
 	GstImxPhysMemAllocator *phys_mem_alloc = GST_IMX_PHYS_MEM_ALLOCATOR(allocator);
 	GstImxPhysMemAllocatorClass *klass = GST_IMX_PHYS_MEM_ALLOCATOR_CLASS(G_OBJECT_GET_CLASS(allocator));
 
+	g_mutex_lock(&phys_mem->mutex);
+
+	while (g_atomic_int_dec_and_test(&phys_mem->mapping_refcount))
+	{
+		GST_LOG_OBJECT(phys_mem_alloc, "unmapping memory block %p (phys addr %" GST_IMX_PHYS_ADDR_FORMAT "), current mapping refcount = %ld -> %ld",(gpointer)phys_mem, phys_mem->phys_addr, phys_mem->mapping_refcount, (phys_mem->mapping_refcount > 0) ? (phys_mem->mapping_refcount - 1) : 0);
+		klass->unmap_phys_mem(phys_mem_alloc, phys_mem);
+	}
 	klass->free_phys_mem(phys_mem_alloc, phys_mem);
 
+	g_mutex_unlock(&phys_mem->mutex);
+
 	GST_INFO_OBJECT(allocator, "freed block %p at phys addr %" GST_IMX_PHYS_ADDR_FORMAT " with size: %u", (gpointer)memory, phys_mem->phys_addr, memory->size);
 
 	g_slice_free1(sizeof(GstImxPhysMemory), phys_mem);
@@ -201,22 +211,7 @@ static gpointer gst_imx_phys_mem_allocator_map(GstMemory *mem, gsize maxsize, Gs
 
 	GST_LOG_OBJECT(phys_mem_alloc, "mapping %u bytes from memory block %p (phys addr %" GST_IMX_PHYS_ADDR_FORMAT "), current mapping refcount = %ld -> %ld", maxsize, (gpointer)mem, phys_mem->phys_addr, phys_mem->mapping_refcount, phys_mem->mapping_refcount + 1);
 
-	phys_mem->mapping_refcount++;
-
-	/* In GStreamer, it is not possible to map the same buffer several times
-	 * with different flags. Therefore, it is safe to use refcounting here,
-	 * since the value of "flags" will be the same with multiple map calls. */
-
-	if (phys_mem->mapping_refcount == 1)
-	{
-		phys_mem->mapping_flags = flags;
-		return klass->map_phys_mem(phys_mem_alloc, phys_mem, maxsize, flags);
-	}
-	else
-	{
-		g_assert(phys_mem->mapping_flags == flags);
-		return phys_mem->mapped_virt_addr;
-	}
+	return klass->map_phys_mem(phys_mem_alloc, phys_mem, maxsize, flags);
 }
 
 
@@ -228,18 +223,14 @@ static void gst_imx_phys_mem_allocator_unmap(GstMemory *mem)
 
 	GST_LOG_OBJECT(phys_mem_alloc, "unmapping memory block %p (phys addr %" GST_IMX_PHYS_ADDR_FORMAT "), current mapping refcount = %ld -> %ld", (gpointer)mem, phys_mem->phys_addr, phys_mem->mapping_refcount, (phys_mem->mapping_refcount > 0) ? (phys_mem->mapping_refcount - 1) : 0);
 
-	if (phys_mem->mapping_refcount > 0)
-	{
-		phys_mem->mapping_refcount--;
-		if (phys_mem->mapping_refcount == 0)
-			klass->unmap_phys_mem(phys_mem_alloc, phys_mem);
-	}
+	klass->unmap_phys_mem(phys_mem_alloc, phys_mem);
 }
 
 
 static GstMemory* gst_imx_phys_mem_allocator_copy(GstMemory *mem, gssize offset, gssize size)
 {
 	GstImxPhysMemory *copy;
+	GstImxPhysMemory *phys_mem = (GstImxPhysMemory *)mem;
 	GstImxPhysMemAllocator *phys_mem_alloc = (GstImxPhysMemAllocator*)(mem->allocator);
 
 	if (size == -1)
@@ -253,16 +244,22 @@ static GstMemory* gst_imx_phys_mem_allocator_copy(GstMemory *mem, gssize offset,
 	}
 
 	{
-		gpointer srcptr, destptr;
+		gpointer srcptr, destptr = NULL;
 		GstImxPhysMemAllocatorClass *klass = GST_IMX_PHYS_MEM_ALLOCATOR_CLASS(G_OBJECT_GET_CLASS(mem->allocator));
 
-		srcptr = klass->map_phys_mem(phys_mem_alloc, (GstImxPhysMemory *)mem, mem->maxsize, GST_MAP_READ);
+		srcptr = gst_imx_phys_mem_allocator_map(mem, mem->maxsize, GST_MAP_READ);
 		destptr = klass->map_phys_mem(phys_mem_alloc, copy, mem->maxsize, GST_MAP_WRITE);
 
-		memcpy(destptr, srcptr, mem->maxsize);
-
-		klass->unmap_phys_mem(phys_mem_alloc, copy);
-		klass->unmap_phys_mem(phys_mem_alloc, (GstImxPhysMemory *)mem);
+		if (srcptr == NULL)
+		{
+			memset(destptr, 0, mem->maxsize);
+			GST_ERROR_OBJECT(phys_mem_alloc, "could not copy memory block - src mem == %p, refcount %i destptr == %p", mem, phys_mem->mapping_refcount, destptr);
+		}
+		else
+		{
+			memcpy(destptr, srcptr, mem->maxsize);
+			gst_imx_phys_mem_allocator_unmap(mem);
+		}
 	}
 
 	GST_INFO_OBJECT(
diff --git a/src/common/phys_mem_allocator.h b/src/common/phys_mem_allocator.h
index 33fbca4..497e988 100644
--- a/src/common/phys_mem_allocator.h
+++ b/src/common/phys_mem_allocator.h
@@ -67,9 +67,11 @@ struct _GstImxPhysMemory
 
 	GstMapFlags mapping_flags;
 
+	GMutex mutex;
+
 	/* Counter to ensure the memory block isn't (un)mapped
 	 * more often than necessary */
-	long mapping_refcount;
+	volatile gint mapping_refcount;
 
 	/* pointer for any additional internal data an allocator may define
 	 * not for outside use; allocators do not have to use it */
diff --git a/src/ipu/allocator.c b/src/ipu/allocator.c
index c4d1580..62bf650 100644
--- a/src/ipu/allocator.c
+++ b/src/ipu/allocator.c
@@ -101,45 +101,59 @@ static gpointer gst_imx_ipu_map_phys_mem(GstImxPhysMemAllocator *allocator, GstI
 	int prot = 0;
 	GstImxIpuAllocator *ipu_allocator = GST_IMX_IPU_ALLOCATOR(allocator);
 
-	g_assert(phys_mem->mapped_virt_addr == NULL);
+	g_mutex_lock(&phys_mem->mutex);
 
-	/* As explained in gst_imx_phys_mem_allocator_map(), the flags are guaranteed to
-	 * be the same when a memory block is mapped multiple times, so the value of
-	 * "flags" will be identical if map() is called two times, for example. */
+	/* In GStreamer, it is not possible to map the same buffer several times
+	 * with different flags. Therefore, it is safe to use refcounting here,
+	 * since the value of "flags" will be the same with multiple map calls. */
 
-	if (flags & GST_MAP_READ)
-		prot |= PROT_READ;
-	if (flags & GST_MAP_WRITE)
-		prot |= PROT_WRITE;
-
-	phys_mem->mapped_virt_addr = mmap(0, size, prot, MAP_SHARED, gst_imx_ipu_get_fd(), (dma_addr_t)(phys_mem->phys_addr));
-	if (phys_mem->mapped_virt_addr == MAP_FAILED)
+	if (0 == g_atomic_int_add(&phys_mem->mapping_refcount, 1))
+	{
+		phys_mem->mapping_flags = flags;
+		if (flags & GST_MAP_READ)
+			prot |= PROT_READ;
+		if (flags & GST_MAP_WRITE)
+			prot |= PROT_WRITE;
+
+		phys_mem->mapped_virt_addr = mmap(0, size, prot, MAP_SHARED, gst_imx_ipu_get_fd(), (dma_addr_t)(phys_mem->phys_addr));
+		if (phys_mem->mapped_virt_addr == MAP_FAILED)
+		{
+			phys_mem->mapped_virt_addr = NULL;
+			GST_ERROR_OBJECT(ipu_allocator, "memory-mapping the IPU framebuffer failed: %s", strerror(errno));
+
+			g_mutex_unlock(&phys_mem->mutex);
+			return NULL;
+		}
+	}
+	else
 	{
-		phys_mem->mapped_virt_addr = NULL;
-		GST_ERROR_OBJECT(ipu_allocator, "memory-mapping the IPU framebuffer failed: %s", strerror(errno));
-		return NULL;
+		g_assert((phys_mem->mapping_flags & GST_MAP_WRITE) || !(flags & GST_MAP_WRITE));
 	}
 
 	GST_LOG_OBJECT(ipu_allocator, "mapped IPU physmem memory:  virt addr %p  phys addr %" GST_IMX_PHYS_ADDR_FORMAT, phys_mem->mapped_virt_addr, phys_mem->phys_addr);
 
+	g_mutex_unlock(&phys_mem->mutex);
 	return phys_mem->mapped_virt_addr;
 }
 
 
 static void gst_imx_ipu_unmap_phys_mem(GstImxPhysMemAllocator *allocator, GstImxPhysMemory *memory)
 {
+	g_mutex_lock(&memory->mutex);
+
 	if (memory->mapped_virt_addr != NULL)
 	{
-		if (munmap(memory->mapped_virt_addr, memory->mem.maxsize) == -1)
-			GST_ERROR_OBJECT(allocator, "unmapping memory-mapped IPU framebuffer failed: %s", strerror(errno));
-		GST_LOG_OBJECT(allocator, "unmapped IPU physmem memory:  virt addr %p  phys addr %" GST_IMX_PHYS_ADDR_FORMAT, memory->mapped_virt_addr, memory->phys_addr);
-		memory->mapped_virt_addr = NULL;
+		if (g_atomic_int_dec_and_test(&memory->mapping_refcount))
+		{
+			if (munmap(memory->mapped_virt_addr, memory->mem.maxsize) == -1)
+				GST_ERROR_OBJECT(allocator, "unmapping memory-mapped IPU framebuffer failed: %s", strerror(errno));
+			GST_LOG_OBJECT(allocator, "unmapped IPU physmem memory:  virt addr %p  phys addr %" GST_IMX_PHYS_ADDR_FORMAT, memory->mapped_virt_addr, memory->phys_addr);
+			memory->mapped_virt_addr = NULL;
+		}
 	}
+	g_mutex_unlock(&memory->mutex);
 }
 
-
-
-
 static void gst_imx_ipu_allocator_class_init(GstImxIpuAllocatorClass *klass)
 {
 	GObjectClass *object_class = G_OBJECT_CLASS(klass);
