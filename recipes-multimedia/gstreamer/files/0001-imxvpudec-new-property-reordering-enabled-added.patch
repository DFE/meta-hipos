From fb1f74cdeac5a9f7b75bf42dcd64f803559ff4e8 Mon Sep 17 00:00:00 2001
From: Sascha Dierberg <dierberg@dresearch-fe.de>
Date: Mon, 26 Sep 2016 14:40:36 +0200
Subject: [PATCH] imxvpudec: new property "reordering-enabled" added

Signed-off-by: Sascha Dierberg <dierberg@dresearch-fe.de>
---
 src/vpu/decoder.c | 38 ++++++++++++++++++++++++++++++++++++--
 src/vpu/decoder.h |  1 +
 2 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/src/vpu/decoder.c b/src/vpu/decoder.c
index 5c38ade..8144107 100644
--- a/src/vpu/decoder.c
+++ b/src/vpu/decoder.c
@@ -38,11 +38,13 @@ GST_DEBUG_CATEGORY_STATIC(imx_vpu_decoder_debug);
 enum
 {
 	PROP_0,
-	PROP_NUM_ADDITIONAL_FRAMEBUFFERS
+	PROP_NUM_ADDITIONAL_FRAMEBUFFERS,
+	PROP_REORDERING_ENABLED
 };
 
 
 #define DEFAULT_NUM_ADDITIONAL_FRAMEBUFFERS 0
+#define DEFAULT_REORDERING_ENABLED TRUE
 
 
 #define GST_IMX_VPU_DECODER_ALLOCATOR_MEM_TYPE "ImxVpuDecMemory2"
@@ -184,6 +186,19 @@ static void gst_imx_vpu_decoder_class_init(GstImxVpuDecoderClass *klass)
 		)
 	);
 
+	g_object_class_install_property(
+		object_class,
+		PROP_REORDERING_ENABLED,
+		g_param_spec_uint(
+			"reordering-enabled",
+			"Reordering output framebuffers by VPU",
+			"Set to TRUE if frame reordering shall be done by the VPU, 0 otherwise",
+			0, 1,
+			DEFAULT_REORDERING_ENABLED,
+			G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS
+		)
+	);
+
 	gst_element_class_set_static_metadata(
 		element_class,
 		"Freescale VPU video decoder",
@@ -203,6 +218,7 @@ static void gst_imx_vpu_decoder_init(GstImxVpuDecoder *vpu_decoder)
 	vpu_decoder->current_output_state = NULL;
 	vpu_decoder->phys_mem_allocator = NULL;
 	vpu_decoder->num_additional_framebuffers = DEFAULT_NUM_ADDITIONAL_FRAMEBUFFERS;
+	vpu_decoder->reordering_enabled = DEFAULT_REORDERING_ENABLED;
 	vpu_decoder->unfinished_frames_table = NULL;
 	vpu_decoder->fatal_error = FALSE;
 }
@@ -991,6 +1007,21 @@ static void gst_imx_vpu_decoder_set_property(GObject *object, guint prop_id, con
 
 			break;
 		}
+		case PROP_REORDERING_ENABLED:
+		{
+			guint num;
+
+			if (vpu_decoder->decoder != NULL)
+			{
+				GST_ERROR_OBJECT(vpu_decoder, "cannot change reordering while a VPU decoder instance is open");
+				return;
+			}
+
+			num = g_value_get_uint(value);
+			vpu_decoder->reordering_enabled = num;
+
+			break;
+		}
 		default:
 			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
 			break;
@@ -1007,6 +1038,9 @@ static void gst_imx_vpu_decoder_get_property(GObject *object, guint prop_id, GVa
 		case PROP_NUM_ADDITIONAL_FRAMEBUFFERS:
 			g_value_set_uint(value, vpu_decoder->num_additional_framebuffers);
 			break;
+		case PROP_REORDERING_ENABLED:
+			g_value_set_uint(value, vpu_decoder->reordering_enabled);
+			break;
 		default:
 			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
 			break;
@@ -1122,7 +1156,7 @@ gboolean gst_imx_vpu_decoder_fill_param_set(GstImxVpuDecoder *vpu_decoder, GstVi
 		s = gst_caps_get_structure(state->caps, structure_nr);
 		name = gst_structure_get_name(s);
 
-		open_params->enable_frame_reordering = 1;
+		open_params->enable_frame_reordering = vpu_decoder->reordering_enabled;
 
 		if (g_strcmp0(name, "video/x-h264") == 0)
 		{
diff --git a/src/vpu/decoder.h b/src/vpu/decoder.h
index 6ff3489..2f41946 100644
--- a/src/vpu/decoder.h
+++ b/src/vpu/decoder.h
@@ -88,6 +88,7 @@ struct _GstImxVpuDecoder
 	GstVideoCodecState *current_output_state;
 	GstAllocator *phys_mem_allocator;
 	guint num_additional_framebuffers;
+	gboolean reordering_enabled;
 	gint chroma_interleave;
 
 	GHashTable *unfinished_frames_table;
-- 
2.6.6

