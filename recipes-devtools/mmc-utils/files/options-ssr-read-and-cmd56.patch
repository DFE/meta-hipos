From 9d7fff7976968c436e5831e0cbef3f18fbb5ffdc Mon Sep 17 00:00:00 2001
From: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
Date: Wed, 3 May 2023 09:17:12 +0200
Subject: [PATCH] New options ssr read and cmd56

Option ssr read:
The content of the SSR register is output.

Option cmd56:
SD card command CMD56 is executed with arguments to read the Apacer SMART data.

Signed-off-by: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
---
 mmc.c      |  11 +++++
 mmc.h      |   3 ++
 mmc_cmds.c | 116 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 mmc_cmds.h |   2 +
 4 files changed, 132 insertions(+)

diff --git a/mmc.c b/mmc.c
index b9aa478..625f3af 100644
--- a/mmc.c
+++ b/mmc.c
@@ -272,6 +272,17 @@ static struct Command commands[] = {
 	  "4. The MMC will perform a soft reset, if your system cannot handle that do not use the boot operation from mmc-utils.\n",
 	  NULL
 	},
+	{ do_read_ssr, -1,
+	  "ssr read", "<device>\n"
+		  "Print SSR data from <device>.\n",
+	  NULL
+	},
+	{ do_cmd56, -1,
+	  "cmd56", "<device>\n"
+		  "Print cmd56 data for apacer <device>.\n"
+		  "Do cmd56 write and read for apacer sd-cards.",
+	  NULL
+	},
 	{ 0, 0, 0, 0 }
 };
 
diff --git a/mmc.h b/mmc.h
index 6f1bf3e..156defd 100644
--- a/mmc.h
+++ b/mmc.h
@@ -250,3 +250,6 @@
 
 #define MMC_RSP_R1	(MMC_RSP_PRESENT|MMC_RSP_CRC|MMC_RSP_OPCODE)
 #define MMC_RSP_R1B	(MMC_RSP_PRESENT|MMC_RSP_CRC|MMC_RSP_OPCODE|MMC_RSP_BUSY)
+
+#define SD_APP_SD_STATUS 13   /* adtc, R1 */
+#define SD_GEN_CMD 56 /* adtc, R1 */
diff --git a/mmc_cmds.c b/mmc_cmds.c
index df66986..81619e5 100644
--- a/mmc_cmds.c
+++ b/mmc_cmds.c
@@ -3247,3 +3247,119 @@ dev_fd_close:
 		exit(1);
 	return 0;
 }
+
+static void dump_data_block(char *block_data, int len)
+{
+	int count=0;
+
+	while(count < len) {
+		if(count % 16 == 0) {
+			if(count == 0) {
+				printf("%03d: ", count);
+			} else {
+				printf("\n%03d: ", count);
+			}
+		}
+		printf("%02x ", (unsigned char)(block_data[count]));
+		count++;
+	}
+	printf("\n");
+	return;
+}
+
+static int cmd56_data(int fd, int cmd56_arg, char *lba_block_data)
+{
+	int ret = 0;
+	struct mmc_ioc_cmd idata;
+	memset(&idata, 0, sizeof(idata));
+	memset(lba_block_data, 0, sizeof(__u8) * 512);
+	idata.write_flag = ((cmd56_arg & 0x1) == 0) ? 1 : 0;
+	idata.opcode = SD_GEN_CMD;
+	idata.arg = cmd56_arg;
+	idata.blksz = 512;
+	idata.blocks = 1;
+	mmc_ioc_cmd_set_data(idata, lba_block_data);
+	idata.flags = MMC_RSP_SPI_R1 | MMC_RSP_R1 | MMC_CMD_ADTC;
+	ret = ioctl(fd, MMC_IOC_CMD, &idata);
+	if (ret)
+		perror("ioctl");
+	return ret;
+}
+
+int do_cmd56(int nargs, char **argv)
+{
+	char data_in[512];
+	int fd, ret;
+	char *device;
+
+	if(nargs != 2) {
+		fprintf(stderr, "Usage: mmc cmd56 <device>\n");
+		exit(1);
+	}
+
+	device = argv[nargs-1];
+	fd = open(device, O_RDWR);
+	if (fd < 0) {
+		perror("open");
+		exit(1);
+	}
+	ret = cmd56_data(fd, 0x10, data_in);
+	if (ret) {
+		fprintf(stderr, "cmd56 arg 0x10 failed, %s\n", device);
+		exit(1);
+	}
+	ret = cmd56_data(fd, 0x21, data_in);
+	if (ret) {
+		fprintf(stderr, "cmd56 arg 0x21 failed, %s\n", device);
+		exit(1);
+	}
+	dump_data_block(data_in, 512); //data block dumping
+	return ret;
+}
+
+static int cmd13_data(int fd, char *block_data)
+{
+	int ret = 0;
+	struct mmc_ioc_cmd idata;
+	memset(&idata, 0, sizeof(idata));
+	memset(block_data, 0, sizeof(__u8) * 64);
+	idata.write_flag = 0;
+	idata.opcode = SD_APP_SD_STATUS;
+	idata.is_acmd = 1;
+	idata.arg = 0;
+	idata.flags =  MMC_RSP_SPI_R1 | MMC_RSP_R1 | MMC_CMD_ADTC;
+	idata.blksz = 64;
+	idata.blocks = 1;
+	mmc_ioc_cmd_set_data(idata, block_data);
+	ret = ioctl(fd, MMC_IOC_CMD, &idata);
+	if (ret)
+		perror("ioctl");
+	return ret;
+}
+
+int do_read_ssr(int nargs, char **argv)
+{
+	char data_in[64];
+	int fd, ret;
+	char *device;
+
+	if (nargs != 2) {
+		fprintf(stderr, "Usage: ssr read <device>\n");
+		exit(1);
+	}
+
+	device = argv[nargs-1];
+	fd = open(device, O_RDWR);
+	if (fd < 0) {
+		perror("open");
+		exit(1);
+	}
+	ret = cmd13_data(fd, data_in);
+	if (ret) {
+		fprintf(stderr, "cmd13 failed, %s\n", device);
+		exit(1);
+	}
+
+	dump_data_block(data_in, 64); //data block dumping
+	return ret;
+}
diff --git a/mmc_cmds.h b/mmc_cmds.h
index 5f2bef1..11b0b44 100644
--- a/mmc_cmds.h
+++ b/mmc_cmds.h
@@ -50,3 +50,5 @@ int do_general_cmd_read(int nargs, char **argv);
 int do_softreset(int nargs, char **argv);
 int do_preidle(int nargs, char **argv);
 int do_alt_boot_op(int nargs, char **argv);
+int do_read_ssr(int argc, char **argv);
+int do_cmd56(int argc, char **argv);
-- 
2.25.1

