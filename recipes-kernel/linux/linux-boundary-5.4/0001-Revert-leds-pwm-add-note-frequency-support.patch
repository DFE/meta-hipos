From 62e39a8afa816f7e00e02041f1dc83b10969cdc6 Mon Sep 17 00:00:00 2001
From: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
Date: Mon, 29 Apr 2019 11:35:21 +0200
Subject: [PATCH] Revert "leds-pwm: add note/frequency support"

This reverts commit e2f97bb15e7c088b5a6768c18011078da9b7e56f.
The reverted commit causes a crash when loading the driver. The commit
is not in the mainline kernel.
---
 drivers/leds/leds-pwm.c | 233 +-----------------------------------------------
 1 file changed, 2 insertions(+), 231 deletions(-)

diff --git a/drivers/leds/leds-pwm.c b/drivers/leds/leds-pwm.c
index 5b48abcd1f88..a9145aa7f36a 100644
--- a/drivers/leds/leds-pwm.c
+++ b/drivers/leds/leds-pwm.c
@@ -12,8 +12,6 @@
  * published by the Free Software Foundation.
  */
 
-#include <linux/ctype.h>
-#include <linux/delay.h>
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/platform_device.h>
@@ -24,38 +22,6 @@
 #include <linux/pwm.h>
 #include <linux/leds_pwm.h>
 #include <linux/slab.h>
-#include "leds.h"
-
-/* lowercase notes are an octave higher*/
-/* n means move up n octaves */
-/* Note: sharp (#) or flat (_) precedes note that it applies to */
-static unsigned base_a_g[] = {
-	36363636,	/* "A",	27.50 hz, 1250 cm */
-	32396317,	/* "B",	30.87 hz, 1110 cm */
-	61156103,	/* "C",	16.35 hz, 2100 cm */
-	54483894,	/* "D",	18.35 hz, 1870 cm */
-	48539631,	/* "E",	20.60 hz, 1670 cm */
-	45815311,	/* "F",	21.83 hz, 1580 cm */
-	40816802,	/* "G",	24.50 hz, 1400 cm */
-};
-static unsigned sharp_a_g[] = {
-	34322702,	/* "#A", "_B"	29.14 hz, 1180 cm */
-	0,		/* "B",		30.87 hz, 1110 cm */
-	57723675,	/* "#C", "_D"	17.32 hz, 1990 cm */
-	51425948,	/* "#D", "_E"	19.45 hz, 1770 cm */
-	0,		/* "E",		20.60 hz, 1670 cm */
-	43243895,	/* "#F", "_G"	23.12 hz, 1490 cm */
-	38525931,	/* "#G", "_A"	25.96 hz, 1320 cm */
-};
-static unsigned flat_a_g[] = {
-	38525931,	/* "_A"	25.96 hz, 1320 cm */
-	34322702,	/* "_B"	29.14 hz, 1180 cm */
-	0,		/* "C",	16.35 hz, 2100 cm */
-	57723675,	/* "_D" 17.32 hz, 1990 cm */
-	51425948,	/* "_E"	19.45 hz, 1770 cm */
-	0,		/* "F",	21.83 hz, 1580 cm */
-	43243895,	/* "_G"	23.12 hz, 1490 cm */
-};
 
 struct led_pwm_data {
 	struct led_classdev	cdev;
@@ -64,11 +30,6 @@ struct led_pwm_data {
 	unsigned int		active_low;
 	unsigned int		period;
 	int			duty;
-	unsigned char		octave;
-#define NM_NORMAL 0
-#define NM_SHARP 1
-#define NM_FLAT 2
-	unsigned char		note_mode;
 };
 
 struct led_pwm_priv {
@@ -76,177 +37,6 @@ struct led_pwm_priv {
 	struct led_pwm_data leds[0];
 };
 
-static ssize_t led_frequency_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	unsigned int period =  led_dat->period;
-	unsigned int freq = period ? 1000000000 / period : 0;
-
-	return sprintf(buf, "%u\n", freq);
-}
-
-static ssize_t led_frequency_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	ssize_t ret = -EINVAL;
-	char *after;
-	unsigned long freq = simple_strtoul(buf, &after, 10);
-	size_t count = after - buf;
-
-	if (*after && isspace(*after))
-		count++;
-
-	if (count == size) {
-		ret = count;
-
-		led_dat->period = freq ? 1000000000 / freq : 0;
-		if (!led_cdev->brightness)
-			led_cdev->brightness = led_cdev->max_brightness >> 1;
-		led_set_brightness(led_cdev, led_cdev->brightness);
-	}
-
-	return ret;
-}
-static ssize_t led_period_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	unsigned int period =  led_dat->period;
-
-	return sprintf(buf, "%u\n", period);
-}
-
-static ssize_t led_period_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	ssize_t ret = -EINVAL;
-	char *after;
-	unsigned long period = simple_strtoul(buf, &after, 10);
-	size_t count = after - buf;
-
-	if (*after && isspace(*after))
-		count++;
-
-	if (count == size) {
-		ret = count;
-		led_dat->period = period;
-		led_set_brightness(led_cdev, led_cdev->brightness);
-	}
-
-	return ret;
-}
-
-static ssize_t led_note_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	unsigned int period =  led_dat->period;
-	unsigned i;
-	int octave = 0;
-	unsigned best = 0;
-	unsigned best_err = 0xffffffff;
-	char note_mode = 0;
-
-	if (period == 0)
-		return sprintf(buf, "\n");
-
-	while (period < base_a_g[2]) {
-		octave++;
-		period <<= 1;
-	}
-	while (period > base_a_g[2]) {
-		octave--;
-		period >>= 1;
-	}
-	for (i = 0; i < 7; i++) {
-		unsigned err = (base_a_g[i] > period) ? (base_a_g[i] - period) :
-			(period - base_a_g[i]);
-		if (best_err > err) {
-			best = i;
-			best_err = err;
-			note_mode = 0;
-		}
-		err = (sharp_a_g[i] > period) ? (sharp_a_g[i] - period) :
-			(period - sharp_a_g[i]);
-		if (best_err > err) {
-			best = i;
-			best_err = err;
-			note_mode = '#';
-		}
-	}
-	return sprintf(buf, "%u%s%c\n", octave, &note_mode, 'A' + best);
-}
-
-static ssize_t led_note_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct led_pwm_data *led_dat =
-		container_of(led_cdev, struct led_pwm_data, cdev);
-	size_t count = 0;
-	while (count < size) {
-		char octave = led_dat->octave;
-		char note_mode = led_dat->note_mode;
-		char c = *buf++;
-		int period = -1;
-		count++;
-		if (c == ' ') {
-			period = 0;
-		} else if (c == '_') {
-			note_mode = NM_FLAT;
-		} else if (c == '#') {
-			note_mode = NM_SHARP;
-		} else if ((c >= '0') && (c <= '9')) {
-			octave = c - '0';
-			led_dat->octave = octave;
-		} else {
-			if ((c >= 'a') && (c <= 'g')) {
-				octave++;
-				c -= 'a' - 'A';
-			}
-			if ((c >= 'A') && (c <= 'G')) {
-				c -= 'A';
-				if (note_mode == NM_NORMAL)
-					period = base_a_g[(int)c];
-				else if (note_mode == NM_SHARP)
-					period = sharp_a_g[(int)c];
-				else if (note_mode == NM_FLAT)
-					period = flat_a_g[(int)c];
-			}
-		}
-		led_dat->note_mode = note_mode;
-		if (period >= 0) {
-			period >>= octave;
-			led_dat->period = period;
-			if (!led_cdev->brightness)
-				led_cdev->brightness = led_cdev->max_brightness
-							>> 1;
-			led_set_brightness(led_cdev, led_cdev->brightness);
-			led_dat->note_mode = NM_NORMAL;
-			if (count < size)
-				msleep(period ? 1000 : 100);
-		}
-	}
-	return count;
-}
-
-static DEVICE_ATTR(note, 0644, led_note_show, led_note_store);
-static DEVICE_ATTR(frequency, 0644, led_frequency_show, led_frequency_store);
-static DEVICE_ATTR(period, 0644, led_period_show, led_period_store);
-
 static void __led_pwm_set(struct led_pwm_data *led_dat)
 {
 	int new_duty = led_dat->duty;
@@ -293,14 +83,8 @@ static inline size_t sizeof_pwm_leds_priv(int num_leds)
 
 static void led_pwm_cleanup(struct led_pwm_priv *priv)
 {
-	while (priv->num_leds--) {
-		struct led_pwm_data *led_dat = &priv->leds[priv->num_leds];
-
-		device_remove_file(led_dat->cdev.dev, &dev_attr_note);
-		device_remove_file(led_dat->cdev.dev, &dev_attr_frequency);
-		device_remove_file(led_dat->cdev.dev, &dev_attr_period);
-		led_classdev_unregister(&led_dat->cdev);
-	}
+	while (priv->num_leds--)
+		led_classdev_unregister(&priv->leds[priv->num_leds].cdev);
 }
 
 static int led_pwm_add(struct device *dev, struct led_pwm_priv *priv,
@@ -316,8 +100,6 @@ static int led_pwm_add(struct device *dev, struct led_pwm_priv *priv,
 	led_data->cdev.brightness = LED_OFF;
 	led_data->cdev.max_brightness = led->max_brightness;
 	led_data->cdev.flags = LED_CORE_SUSPENDRESUME;
-	led_data->octave = 4;
-	led_data->period = led_data->pwm->state.period;
 
 	if (child)
 		led_data->pwm = devm_of_pwm_get(dev, child, NULL);
@@ -350,17 +132,6 @@ static int led_pwm_add(struct device *dev, struct led_pwm_priv *priv,
 
 	ret = led_classdev_register(dev, &led_data->cdev);
 	if (ret == 0) {
-		/* register the attributes */
-		ret = device_create_file(led_data->cdev.dev,
-					 &dev_attr_frequency);
-		if (ret)
-			return ret;
-		ret = device_create_file(led_data->cdev.dev, &dev_attr_period);
-		if (ret)
-			return ret;
-		ret = device_create_file(led_data->cdev.dev, &dev_attr_note);
-		if (ret)
-			return ret;
 		priv->num_leds++;
 		led_pwm_set(&led_data->cdev, led_data->cdev.brightness);
 	} else {
-- 
2.16.4

