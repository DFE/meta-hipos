From 42a86e6a55125bb4f5fb4a1aee5579e236243f1b Mon Sep 17 00:00:00 2001
From: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
Date: Mon, 15 Mar 2021 11:41:21 +0100
Subject: [PATCH] spi-imx: Restore driver version HYP-24810

Current spi-imx driver version from kernel 5.4.100 does not work with
'spi-reg' tool. Therefore the driver version from kernel 4.14.98 is
restored.

Signed-off-by: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
---
 drivers/spi/spi-imx.c | 485 ++++++++++++++++--------------------------
 1 file changed, 181 insertions(+), 304 deletions(-)

diff --git a/drivers/spi/spi-imx.c b/drivers/spi/spi-imx.c
index 7d37fb9096b4..84d2441ea25a 100644
--- a/drivers/spi/spi-imx.c
+++ b/drivers/spi/spi-imx.c
@@ -1,6 +1,22 @@
-// SPDX-License-Identifier: GPL-2.0+
-// Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
-// Copyright (C) 2008 Juergen Beisert
+/*
+ * Copyright 2004-2007, 2016 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2008 Juergen Beisert
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the
+ * Free Software Foundation
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301, USA.
+ */
 
 #include <linux/clk.h>
 #include <linux/completion.h>
@@ -28,10 +44,6 @@
 
 #define DRIVER_NAME "spi_imx"
 
-static bool use_dma = true;
-module_param(use_dma, bool, 0644);
-MODULE_PARM_DESC(use_dma, "Enable usage of DMA when available (default)");
-
 #define MXC_CSPIRXDATA		0x00
 #define MXC_CSPITXDATA		0x04
 #define MXC_CSPICTRL		0x08
@@ -44,8 +56,8 @@ MODULE_PARM_DESC(use_dma, "Enable usage of DMA when available (default)");
 #define MXC_INT_RDR	BIT(4) /* Receive date threshold interrupt */
 #define MXC_INT_TCEN    BIT(7)	/* Transfer complete */
 
-/* The maximum bytes that a sdma BD can transfer. */
-#define MAX_SDMA_BD_BYTES (1 << 15)
+/* The maximum  bytes that a sdma BD can transfer.*/
+#define MAX_SDMA_BD_BYTES  (1 << 15)
 #define MX51_ECSPI_CTRL_MAX_BURST	512
 
 enum spi_imx_devtype {
@@ -56,16 +68,14 @@ enum spi_imx_devtype {
 	IMX35_CSPI,	/* CSPI on all i.mx except above */
 	IMX51_ECSPI,	/* ECSPI on i.mx51 */
 	IMX53_ECSPI,	/* ECSPI on i.mx53 and later */
-	IMX6UL_ECSPI,	/* ERR009165 fix from i.mx6ul */
+	IMX6UL_ECSPI,
 };
 
 struct spi_imx_data;
 
 struct spi_imx_devtype_data {
 	void (*intctrl)(struct spi_imx_data *, int);
-	int (*prepare_message)(struct spi_imx_data *, struct spi_message *);
-	int (*prepare_transfer)(struct spi_imx_data *, struct spi_device *,
-				struct spi_transfer *);
+	int (*config)(struct spi_device *);
 	void (*trigger)(struct spi_imx_data *);
 	int (*rx_available)(struct spi_imx_data *);
 	void (*reset)(struct spi_imx_data *);
@@ -108,7 +118,8 @@ struct spi_imx_data {
 	void *rx_buf;
 	const void *tx_buf;
 	unsigned int txfifo; /* number of words pushed in tx FIFO */
-	unsigned int dynamic_burst;
+	unsigned int dynamic_burst, read_u32;
+	unsigned int word_mask;
 
 	/* Slave mode */
 	bool slave_mode;
@@ -163,8 +174,6 @@ static void spi_imx_buf_rx_##type(struct spi_imx_data *spi_imx)		\
 		*(type *)spi_imx->rx_buf = val;				\
 		spi_imx->rx_buf += sizeof(type);			\
 	}								\
-									\
-	spi_imx->remainder -= sizeof(type);				\
 }
 
 #define MXC_SPI_BUF_TX(type)						\
@@ -228,22 +237,14 @@ static unsigned int spi_imx_clkdiv_2(unsigned int fin,
 
 static int spi_imx_bytes_per_word(const int bits_per_word)
 {
-	if (bits_per_word <= 8)
-		return 1;
-	else if (bits_per_word <= 16)
-		return 2;
-	else
-		return 4;
+	return DIV_ROUND_UP(bits_per_word, BITS_PER_BYTE);
 }
 
 static bool spi_imx_can_dma(struct spi_master *master, struct spi_device *spi,
 			 struct spi_transfer *transfer)
 {
 	struct spi_imx_data *spi_imx = spi_master_get_devdata(master);
-	int bytes_per_word;
-
-	if (!use_dma)
-		return false;
+	unsigned int bytes_per_word;
 
 	if (!master->dma_rx)
 		return false;
@@ -283,7 +284,7 @@ static bool spi_imx_can_dma(struct spi_master *master, struct spi_device *spi,
 #define MX51_ECSPI_INT_RDREN		(1 <<  4)
 #define MX51_ECSPI_INT_TCEN             (1 << 7)
 
-#define MX51_ECSPI_DMA		0x14
+#define MX51_ECSPI_DMA      0x14
 #define MX51_ECSPI_DMA_TX_WML(wml)	((wml) & 0x3f)
 #define MX51_ECSPI_DMA_RX_WML(wml)	(((wml) & 0x3f) << 16)
 #define MX51_ECSPI_DMA_RXT_WML(wml)	(((wml) & 0x3f) << 24)
@@ -315,39 +316,26 @@ static void spi_imx_buf_rx_swap_u32(struct spi_imx_data *spi_imx)
 		else if (bytes_per_word == 2)
 			val = (val << 16) | (val >> 16);
 #endif
+		val &= spi_imx->word_mask;
 		*(u32 *)spi_imx->rx_buf = val;
 		spi_imx->rx_buf += sizeof(u32);
 	}
-
-	spi_imx->remainder -= sizeof(u32);
 }
 
 static void spi_imx_buf_rx_swap(struct spi_imx_data *spi_imx)
 {
-	int unaligned;
-	u32 val;
-
-	unaligned = spi_imx->remainder % 4;
+	unsigned int bytes_per_word;
 
-	if (!unaligned) {
+	bytes_per_word = spi_imx_bytes_per_word(spi_imx->bits_per_word);
+	if (spi_imx->read_u32) {
 		spi_imx_buf_rx_swap_u32(spi_imx);
 		return;
 	}
 
-	if (spi_imx_bytes_per_word(spi_imx->bits_per_word) == 2) {
+	if (bytes_per_word == 1)
+		spi_imx_buf_rx_u8(spi_imx);
+	else if (bytes_per_word == 2)
 		spi_imx_buf_rx_u16(spi_imx);
-		return;
-	}
-
-	val = readl(spi_imx->base + MXC_CSPIRXDATA);
-
-	while (unaligned--) {
-		if (spi_imx->rx_buf) {
-			*(u8 *)spi_imx->rx_buf = (val >> (8 * unaligned)) & 0xff;
-			spi_imx->rx_buf++;
-		}
-		spi_imx->remainder--;
-	}
 }
 
 static void spi_imx_buf_tx_swap_u32(struct spi_imx_data *spi_imx)
@@ -359,6 +347,7 @@ static void spi_imx_buf_tx_swap_u32(struct spi_imx_data *spi_imx)
 
 	if (spi_imx->tx_buf) {
 		val = *(u32 *)spi_imx->tx_buf;
+		val &= spi_imx->word_mask;
 		spi_imx->tx_buf += sizeof(u32);
 	}
 
@@ -376,30 +365,40 @@ static void spi_imx_buf_tx_swap_u32(struct spi_imx_data *spi_imx)
 
 static void spi_imx_buf_tx_swap(struct spi_imx_data *spi_imx)
 {
-	int unaligned;
-	u32 val = 0;
+	u32 ctrl, val;
+	unsigned int bytes_per_word;
 
-	unaligned = spi_imx->count % 4;
+	if (spi_imx->count == spi_imx->remainder) {
+		ctrl = readl(spi_imx->base + MX51_ECSPI_CTRL);
+		ctrl &= ~MX51_ECSPI_CTRL_BL_MASK;
+		if (spi_imx->count > MX51_ECSPI_CTRL_MAX_BURST) {
+			spi_imx->remainder = spi_imx->count %
+					     MX51_ECSPI_CTRL_MAX_BURST;
+			val = MX51_ECSPI_CTRL_MAX_BURST * 8 - 1;
+		} else if (spi_imx->count >= sizeof(u32)) {
+			spi_imx->remainder = spi_imx->count % sizeof(u32);
+			val = (spi_imx->count - spi_imx->remainder) * 8 - 1;
+		} else {
+			spi_imx->remainder = 0;
+			val = spi_imx->bits_per_word - 1;
+			spi_imx->read_u32 = 0;
+		}
 
-	if (!unaligned) {
-		spi_imx_buf_tx_swap_u32(spi_imx);
-		return;
+		ctrl |= (val << MX51_ECSPI_CTRL_BL_OFFSET);
+		writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
 	}
 
-	if (spi_imx_bytes_per_word(spi_imx->bits_per_word) == 2) {
-		spi_imx_buf_tx_u16(spi_imx);
+	if (spi_imx->count >= sizeof(u32)) {
+		spi_imx_buf_tx_swap_u32(spi_imx);
 		return;
 	}
 
-	while (unaligned--) {
-		if (spi_imx->tx_buf) {
-			val |= *(u8 *)spi_imx->tx_buf << (8 * unaligned);
-			spi_imx->tx_buf++;
-		}
-		spi_imx->count--;
-	}
+	bytes_per_word = spi_imx_bytes_per_word(spi_imx->bits_per_word);
 
-	writel(val, spi_imx->base + MXC_CSPITXDATA);
+	if (bytes_per_word == 1)
+		spi_imx_buf_tx_u8(spi_imx);
+	else if (bytes_per_word == 2)
+		spi_imx_buf_tx_u16(spi_imx);
 }
 
 static void mx53_ecspi_rx_slave(struct spi_imx_data *spi_imx)
@@ -418,8 +417,6 @@ static void mx53_ecspi_rx_slave(struct spi_imx_data *spi_imx)
 		spi_imx->rx_buf += n_bytes;
 		spi_imx->slave_burst -= n_bytes;
 	}
-
-	spi_imx->remainder -= sizeof(u32);
 }
 
 static void mx53_ecspi_tx_slave(struct spi_imx_data *spi_imx)
@@ -517,13 +514,13 @@ static void mx51_ecspi_disable(struct spi_imx_data *spi_imx)
 	writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
 }
 
-static int mx51_ecspi_prepare_message(struct spi_imx_data *spi_imx,
-				      struct spi_message *msg)
+static int mx51_ecspi_config(struct spi_device *spi)
 {
-	struct spi_device *spi = msg->spi;
+	struct spi_imx_data *spi_imx = spi_master_get_devdata(spi->master);
 	u32 ctrl = MX51_ECSPI_CTRL_ENABLE;
-	u32 testreg;
+	u32 clk = spi_imx->speed_hz, delay, reg;
 	u32 cfg = readl(spi_imx->base + MX51_ECSPI_CONFIG);
+	u32 bits = spi_imx->bits_per_word;
 
 	/* set Master or Slave mode */
 	if (spi_imx->slave_mode)
@@ -537,28 +534,35 @@ static int mx51_ecspi_prepare_message(struct spi_imx_data *spi_imx,
 	if (spi->mode & SPI_READY)
 		ctrl |= MX51_ECSPI_CTRL_DRCTL(spi_imx->spi_drctl);
 
+	/* set clock speed */
+	ctrl |= mx51_ecspi_clkdiv(spi_imx, spi_imx->speed_hz, &clk);
+	spi_imx->spi_bus_clk = clk;
+
 	/* set chip select to use */
 	ctrl |= MX51_ECSPI_CTRL_CS(spi->chip_select);
 
-	/*
-	 * To workaround ERR009165, SDMA script needs to use XCH instead of SMC
-	 * just like PIO mode and it is fixed on i.mx6ul
-	 */
-	if (spi_imx->usedma && !cspi_quirk(spi_imx, QUIRK_ERR009165))
-		ctrl |= MX51_ECSPI_CTRL_SMC;
-
-	/*
-	 * The ctrl register must be written first, with the EN bit set other
-	 * registers must not be written to.
-	 */
-	writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
+	if (spi_imx->slave_mode) {
+		bits = spi_imx->slave_burst * 8;
+	}  else {
+		if (bits == 32) {
+			unsigned len = spi_imx->len / 4;
 
-	testreg = readl(spi_imx->base + MX51_ECSPI_TESTREG);
-	if (spi->mode & SPI_LOOP)
-		testreg |= MX51_ECSPI_TESTREG_LBC;
-	else
-		testreg &= ~MX51_ECSPI_TESTREG_LBC;
-	writel(testreg, spi_imx->base + MX51_ECSPI_TESTREG);
+			while (len > 128) {
+				if (len & 1)
+					break;
+				len >>= 1;
+			}
+			while (len > 128) {
+				if (len % 3)
+					break;
+				len /= 3;
+			}
+			if ((len > 128) || !len)
+				len = 1;
+			bits = len << 5;
+		}
+	}
+	ctrl |= (bits - 1) << MX51_ECSPI_CTRL_BL_OFFSET;
 
 	/*
 	 * eCSPI burst completion by Chip Select signal in Slave mode
@@ -582,67 +586,30 @@ static int mx51_ecspi_prepare_message(struct spi_imx_data *spi_imx,
 		cfg &= ~MX51_ECSPI_CONFIG_SCLKPOL(spi->chip_select);
 		cfg &= ~MX51_ECSPI_CONFIG_SCLKCTL(spi->chip_select);
 	}
-
 	if (spi->mode & SPI_CS_HIGH)
 		cfg |= MX51_ECSPI_CONFIG_SSBPOL(spi->chip_select);
 	else
 		cfg &= ~MX51_ECSPI_CONFIG_SSBPOL(spi->chip_select);
 
-	writel(cfg, spi_imx->base + MX51_ECSPI_CONFIG);
-
-	return 0;
-}
-
-static int mx51_ecspi_prepare_transfer(struct spi_imx_data *spi_imx,
-				       struct spi_device *spi,
-				       struct spi_transfer *t)
-{
-	u32 ctrl = readl(spi_imx->base + MX51_ECSPI_CTRL);
-	u32 clk = t->speed_hz, delay;
-	u32 bits = spi_imx->bits_per_word;
-
-	/* Clear BL field and set the right value */
-	ctrl &= ~MX51_ECSPI_CTRL_BL_MASK;
-	if (spi_imx->slave_mode && is_imx53_ecspi(spi_imx)) {
-		bits = spi_imx->slave_burst * 8;
-	} else {
-		if (bits == 32) {
-			unsigned len = spi_imx->len / 4;
-
-			while (len > 128) {
-				if (len & 1)
-					break;
-				len >>= 1;
-			}
-			while (len > 128) {
-				if (len % 3)
-					break;
-				len /= 3;
-			}
-			if ((len > 128) || !len)
-				len = 1;
-			bits = len << 5;
-		}
-	}
-	ctrl |= (bits - 1) << MX51_ECSPI_CTRL_BL_OFFSET;
-
-	/* set clock speed */
-	ctrl &= ~(0xf << MX51_ECSPI_CTRL_POSTDIV_OFFSET |
-		  0xf << MX51_ECSPI_CTRL_PREDIV_OFFSET);
-	ctrl |= mx51_ecspi_clkdiv(spi_imx, t->speed_hz, &clk);
-	spi_imx->spi_bus_clk = clk;
-
 	/*
-	 * ERR009165: work in XHC mode instead of SMC as PIO on the chips
-	 * before i.mx6ul.
+	 * To workaround ERR009165, SDMA script needs to use XCH instead of SMC
+	 * just like PIO mode and it is fixed on i.mx6ul
 	 */
 	if (spi_imx->usedma && !cspi_quirk(spi_imx, QUIRK_ERR009165))
 		ctrl |= MX51_ECSPI_CTRL_SMC;
-	else
-		ctrl &= ~MX51_ECSPI_CTRL_SMC;
 
+	/* CTRL register always go first to bring out controller from reset */
 	writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
 
+	reg = readl(spi_imx->base + MX51_ECSPI_TESTREG);
+	if (spi->mode & SPI_LOOP)
+		reg |= MX51_ECSPI_TESTREG_LBC;
+	else
+		reg &= ~MX51_ECSPI_TESTREG_LBC;
+	writel(reg, spi_imx->base + MX51_ECSPI_TESTREG);
+
+	writel(cfg, spi_imx->base + MX51_ECSPI_CONFIG);
+
 	/*
 	 * Wait until the changes in the configuration register CONFIGREG
 	 * propagate into the hardware. It takes exactly one tick of the
@@ -665,7 +632,12 @@ static int mx51_ecspi_prepare_transfer(struct spi_imx_data *spi_imx,
 
 static void mx51_setup_wml(struct spi_imx_data *spi_imx)
 {
-	u32 tx_wml;
+	int tx_wml;
+
+	/*
+	 * Configure the DMA register: setup the watermark
+	 * and enable DMA request.
+	 */
 
 	/*
 	 * work around for
@@ -676,14 +648,11 @@ static void mx51_setup_wml(struct spi_imx_data *spi_imx)
 		spi_imx_get_fifosize(spi_imx) - spi_imx->tx_config.dst_maxburst :
 		0;
 
-	/*
-	 * Configure the DMA register: setup the watermark
-	 * and enable DMA request.
-	 */
-	writel(MX51_ECSPI_DMA_RX_WML(spi_imx->wml - 1) |
-		MX51_ECSPI_DMA_TX_WML(tx_wml) |
-		MX51_ECSPI_DMA_TEDEN | MX51_ECSPI_DMA_RXDEN,
-		spi_imx->base + MX51_ECSPI_DMA);
+	if (spi_imx->usedma)
+		writel(MX51_ECSPI_DMA_RX_WML(spi_imx->wml - 1) |
+			MX51_ECSPI_DMA_TX_WML(tx_wml) |
+			MX51_ECSPI_DMA_TEDEN | MX51_ECSPI_DMA_RXDEN,
+			spi_imx->base + MX51_ECSPI_DMA);
 }
 
 static int mx51_ecspi_rx_available(struct spi_imx_data *spi_imx)
@@ -750,20 +719,13 @@ static void mx31_trigger(struct spi_imx_data *spi_imx)
 	writel(reg, spi_imx->base + MXC_CSPICTRL);
 }
 
-static int mx31_prepare_message(struct spi_imx_data *spi_imx,
-				struct spi_message *msg)
-{
-	return 0;
-}
-
-static int mx31_prepare_transfer(struct spi_imx_data *spi_imx,
-				 struct spi_device *spi,
-				 struct spi_transfer *t)
+static int mx31_config(struct spi_device *spi)
 {
+	struct spi_imx_data *spi_imx = spi_master_get_devdata(spi->master);
 	unsigned int reg = MX31_CSPICTRL_ENABLE | MX31_CSPICTRL_MASTER;
 	unsigned int clk;
 
-	reg |= spi_imx_clkdiv_2(spi_imx->spi_clk, t->speed_hz, &clk) <<
+	reg |= spi_imx_clkdiv_2(spi_imx->spi_clk, spi_imx->speed_hz, &clk) <<
 		MX31_CSPICTRL_DR_SHIFT;
 	spi_imx->spi_bus_clk = clk;
 
@@ -798,10 +760,8 @@ static int mx31_prepare_transfer(struct spi_imx_data *spi_imx,
 	writel(reg, spi_imx->base + MX31_CSPI_TESTREG);
 
 	if (spi_imx->usedma) {
-		/*
-		 * configure DMA requests when RXFIFO is half full and
-		 * when TXFIFO is half empty
-		 */
+		/* configure DMA requests when RXFIFO is half full and
+		   when TXFIFO is half empty */
 		writel(MX31_DMAREG_RH_DEN | MX31_DMAREG_TH_DEN,
 			spi_imx->base + MX31_CSPI_DMAREG);
 	}
@@ -855,21 +815,14 @@ static void mx21_trigger(struct spi_imx_data *spi_imx)
 	writel(reg, spi_imx->base + MXC_CSPICTRL);
 }
 
-static int mx21_prepare_message(struct spi_imx_data *spi_imx,
-				struct spi_message *msg)
-{
-	return 0;
-}
-
-static int mx21_prepare_transfer(struct spi_imx_data *spi_imx,
-				 struct spi_device *spi,
-				 struct spi_transfer *t)
+static int mx21_config(struct spi_device *spi)
 {
+	struct spi_imx_data *spi_imx = spi_master_get_devdata(spi->master);
 	unsigned int reg = MX21_CSPICTRL_ENABLE | MX21_CSPICTRL_MASTER;
 	unsigned int max = is_imx27_cspi(spi_imx) ? 16 : 18;
 	unsigned int clk;
 
-	reg |= spi_imx_clkdiv_1(spi_imx->spi_clk, t->speed_hz, max, &clk)
+	reg |= spi_imx_clkdiv_1(spi_imx->spi_clk, spi_imx->speed_hz, max, &clk)
 		<< MX21_CSPICTRL_DR_SHIFT;
 	spi_imx->spi_bus_clk = clk;
 
@@ -931,20 +884,13 @@ static void mx1_trigger(struct spi_imx_data *spi_imx)
 	writel(reg, spi_imx->base + MXC_CSPICTRL);
 }
 
-static int mx1_prepare_message(struct spi_imx_data *spi_imx,
-			       struct spi_message *msg)
-{
-	return 0;
-}
-
-static int mx1_prepare_transfer(struct spi_imx_data *spi_imx,
-				struct spi_device *spi,
-				struct spi_transfer *t)
+static int mx1_config(struct spi_device *spi)
 {
+	struct spi_imx_data *spi_imx = spi_master_get_devdata(spi->master);
 	unsigned int reg = MX1_CSPICTRL_ENABLE | MX1_CSPICTRL_MASTER;
 	unsigned int clk;
 
-	reg |= spi_imx_clkdiv_2(spi_imx->spi_clk, t->speed_hz, &clk) <<
+	reg |= spi_imx_clkdiv_2(spi_imx->spi_clk, spi_imx->speed_hz, &clk) <<
 		MX1_CSPICTRL_DR_SHIFT;
 	spi_imx->spi_bus_clk = clk;
 
@@ -972,8 +918,7 @@ static void mx1_reset(struct spi_imx_data *spi_imx)
 
 static struct spi_imx_devtype_data imx1_cspi_devtype_data = {
 	.intctrl = mx1_intctrl,
-	.prepare_message = mx1_prepare_message,
-	.prepare_transfer = mx1_prepare_transfer,
+	.config = mx1_config,
 	.trigger = mx1_trigger,
 	.rx_available = mx1_rx_available,
 	.reset = mx1_reset,
@@ -985,8 +930,7 @@ static struct spi_imx_devtype_data imx1_cspi_devtype_data = {
 
 static struct spi_imx_devtype_data imx21_cspi_devtype_data = {
 	.intctrl = mx21_intctrl,
-	.prepare_message = mx21_prepare_message,
-	.prepare_transfer = mx21_prepare_transfer,
+	.config = mx21_config,
 	.trigger = mx21_trigger,
 	.rx_available = mx21_rx_available,
 	.reset = mx21_reset,
@@ -999,8 +943,7 @@ static struct spi_imx_devtype_data imx21_cspi_devtype_data = {
 static struct spi_imx_devtype_data imx27_cspi_devtype_data = {
 	/* i.mx27 cspi shares the functions with i.mx21 one */
 	.intctrl = mx21_intctrl,
-	.prepare_message = mx21_prepare_message,
-	.prepare_transfer = mx21_prepare_transfer,
+	.config = mx21_config,
 	.trigger = mx21_trigger,
 	.rx_available = mx21_rx_available,
 	.reset = mx21_reset,
@@ -1012,8 +955,7 @@ static struct spi_imx_devtype_data imx27_cspi_devtype_data = {
 
 static struct spi_imx_devtype_data imx31_cspi_devtype_data = {
 	.intctrl = mx31_intctrl,
-	.prepare_message = mx31_prepare_message,
-	.prepare_transfer = mx31_prepare_transfer,
+	.config = mx31_config,
 	.trigger = mx31_trigger,
 	.rx_available = mx31_rx_available,
 	.reset = mx31_reset,
@@ -1026,8 +968,7 @@ static struct spi_imx_devtype_data imx31_cspi_devtype_data = {
 static struct spi_imx_devtype_data imx35_cspi_devtype_data = {
 	/* i.mx35 and later cspi shares the functions with i.mx31 one */
 	.intctrl = mx31_intctrl,
-	.prepare_message = mx31_prepare_message,
-	.prepare_transfer = mx31_prepare_transfer,
+	.config = mx31_config,
 	.trigger = mx31_trigger,
 	.rx_available = mx31_rx_available,
 	.reset = mx31_reset,
@@ -1040,8 +981,7 @@ static struct spi_imx_devtype_data imx35_cspi_devtype_data = {
 
 static struct spi_imx_devtype_data imx51_ecspi_devtype_data = {
 	.intctrl = mx51_ecspi_intctrl,
-	.prepare_message = mx51_ecspi_prepare_message,
-	.prepare_transfer = mx51_ecspi_prepare_transfer,
+	.config = mx51_ecspi_config,
 	.trigger = mx51_ecspi_trigger,
 	.rx_available = mx51_ecspi_rx_available,
 	.reset = mx51_ecspi_reset,
@@ -1057,8 +997,7 @@ static struct spi_imx_devtype_data imx51_ecspi_devtype_data = {
 
 static struct spi_imx_devtype_data imx53_ecspi_devtype_data = {
 	.intctrl = mx51_ecspi_intctrl,
-	.prepare_message = mx51_ecspi_prepare_message,
-	.prepare_transfer = mx51_ecspi_prepare_transfer,
+	.config = mx51_ecspi_config,
 	.trigger = mx51_ecspi_trigger,
 	.rx_available = mx51_ecspi_rx_available,
 	.reset = mx51_ecspi_reset,
@@ -1074,8 +1013,7 @@ static struct spi_imx_devtype_data imx53_ecspi_devtype_data = {
 
 static struct spi_imx_devtype_data imx6ul_ecspi_devtype_data = {
 	.intctrl = mx51_ecspi_intctrl,
-	.prepare_message = mx51_ecspi_prepare_message,
-	.prepare_transfer = mx51_ecspi_prepare_transfer,
+	.config = mx51_ecspi_config,
 	.trigger = mx51_ecspi_trigger,
 	.rx_available = mx51_ecspi_rx_available,
 	.reset = mx51_ecspi_reset,
@@ -1175,52 +1113,12 @@ static void spi_imx_chipselect(struct spi_device *spi, int is_active)
 	spi_imx_chip_select(spi_master_get_devdata(spi->master), is_active, spi->chip_select, spi->mode, 0);
 }
 
-static void spi_imx_set_burst_len(struct spi_imx_data *spi_imx, int n_bits)
-{
-	u32 ctrl;
-
-	ctrl = readl(spi_imx->base + MX51_ECSPI_CTRL);
-	ctrl &= ~MX51_ECSPI_CTRL_BL_MASK;
-	ctrl |= ((n_bits - 1) << MX51_ECSPI_CTRL_BL_OFFSET);
-	writel(ctrl, spi_imx->base + MX51_ECSPI_CTRL);
-}
-
 static void spi_imx_push(struct spi_imx_data *spi_imx)
 {
-	unsigned int burst_len, fifo_words;
-
-	if (spi_imx->dynamic_burst)
-		fifo_words = 4;
-	else
-		fifo_words = spi_imx_bytes_per_word(spi_imx->bits_per_word);
-	/*
-	 * Reload the FIFO when the remaining bytes to be transferred in the
-	 * current burst is 0. This only applies when bits_per_word is a
-	 * multiple of 8.
-	 */
-	if (!spi_imx->remainder) {
-		if (spi_imx->dynamic_burst) {
-
-			/* We need to deal unaligned data first */
-			burst_len = spi_imx->count % MX51_ECSPI_CTRL_MAX_BURST;
-
-			if (!burst_len)
-				burst_len = MX51_ECSPI_CTRL_MAX_BURST;
-
-			spi_imx_set_burst_len(spi_imx, burst_len * 8);
-
-			spi_imx->remainder = burst_len;
-		} else {
-			spi_imx->remainder = fifo_words;
-		}
-	}
-
 	while (spi_imx->txfifo < spi_imx->devtype_data->fifo_size) {
 		if (!spi_imx->count)
 			break;
-		if (spi_imx->dynamic_burst &&
-		    spi_imx->txfifo >= DIV_ROUND_UP(spi_imx->remainder,
-						     fifo_words))
+		if (spi_imx->txfifo && (spi_imx->count == spi_imx->remainder))
 			break;
 		spi_imx->tx(spi_imx);
 		spi_imx->txfifo++;
@@ -1279,20 +1177,27 @@ static int spi_imx_setupxfer(struct spi_device *spi,
 	spi_imx->speed_hz  = t->speed_hz;
 	spi_imx->len  = t->len;
 
-	/*
-	 * Initialize the functions for transfer. To transfer non byte-aligned
-	 * words, we have to use multiple word-size bursts, we can't use
-	 * dynamic_burst in that case.
-	 */
-	if (spi_imx->devtype_data->dynamic_burst && !spi_imx->slave_mode &&
-	    (spi_imx->bits_per_word == 8 ||
-	    spi_imx->bits_per_word == 16 ||
-	    spi_imx->bits_per_word == 32)) {
+	/* Initialize the functions for transfer */
+	if (spi_imx->devtype_data->dynamic_burst && !spi_imx->slave_mode) {
+		u32 mask;
 
+		spi_imx->dynamic_burst = 0;
+		spi_imx->remainder = 0;
+		spi_imx->read_u32  = 1;
+
+		mask = (1 << bits_per_word) - 1;
 		spi_imx->rx = spi_imx_buf_rx_swap;
 		spi_imx->tx = spi_imx_buf_tx_swap;
 		spi_imx->dynamic_burst = 1;
+		spi_imx->remainder = t->len;
 
+		if (bits_per_word <= 8)
+			spi_imx->word_mask = mask << 24 | mask << 16
+					     | mask << 8 | mask;
+		else if (bits_per_word <= 16)
+			spi_imx->word_mask = mask << 16 | mask;
+		else
+			spi_imx->word_mask = mask;
 	} else {
 		if (bits_per_word <= 8) {
 			spi_imx->rx = spi_imx_buf_rx_u8;
@@ -1304,17 +1209,14 @@ static int spi_imx_setupxfer(struct spi_device *spi,
 			spi_imx->rx = spi_imx_buf_rx_u32;
 			spi_imx->tx = spi_imx_buf_tx_u32;
 		}
-		spi_imx->dynamic_burst = 0;
 	}
 
-	if (is_imx53_ecspi(spi_imx) && spi_imx->slave_mode) {
+	if (spi_imx->slave_mode) {
 		spi_imx->rx = mx53_ecspi_rx_slave;
 		spi_imx->tx = mx53_ecspi_tx_slave;
 		spi_imx->slave_burst = t->len;
 	}
-
-	spi_imx->devtype_data->prepare_transfer(spi_imx, spi, t);
-
+	spi_imx->devtype_data->config(spi);
 	return 0;
 }
 
@@ -1502,6 +1404,7 @@ static int spi_imx_dma_transfer(struct spi_imx_data *spi_imx,
 		dev_err(spi_imx->dev, "No setup_wml()?\n");
 		return -EINVAL;
 	}
+
 	spi_imx->devtype_data->setup_wml(spi_imx);
 
 	nents = rx->nents;
@@ -1625,7 +1528,6 @@ static int spi_imx_pio_transfer(struct spi_device *spi,
 	spi_imx->rx_buf = transfer->rx_buf;
 	spi_imx->count = transfer->len;
 	spi_imx->txfifo = 0;
-	spi_imx->remainder = 0;
 
 	reinit_completion(&spi_imx->xfer_done);
 
@@ -1663,7 +1565,6 @@ static int spi_imx_pio_transfer_slave(struct spi_device *spi,
 	spi_imx->rx_buf = transfer->rx_buf;
 	spi_imx->count = transfer->len;
 	spi_imx->txfifo = 0;
-	spi_imx->remainder = 0;
 
 	reinit_completion(&spi_imx->xfer_done);
 	spi_imx->slave_aborted = false;
@@ -1742,13 +1643,7 @@ spi_imx_prepare_message(struct spi_master *master, struct spi_message *msg)
 		return ret;
 	}
 
-	ret = spi_imx->devtype_data->prepare_message(spi_imx, msg);
-	if (ret) {
-		clk_disable(spi_imx->clk_ipg);
-		clk_disable(spi_imx->clk_per);
-	}
-
-	return ret;
+	return 0;
 }
 
 static int
@@ -1797,8 +1692,7 @@ static int spi_imx_probe(struct platform_device *pdev)
 	struct spi_master *master;
 	struct spi_imx_data *spi_imx;
 	struct resource *res;
-	int i, ret, irq, spi_drctl, num_cs;
-	int idle_state;
+	int i, ret, irq, spi_drctl, num_cs, idle_state;
 	u32 speed_hz;
 	const struct spi_imx_devtype_data *devtype_data = of_id ? of_id->data :
 		(struct spi_imx_devtype_data *)pdev->id_entry->driver_data;
@@ -1860,25 +1754,33 @@ static int spi_imx_probe(struct platform_device *pdev)
 
 	spi_imx->devtype_data = devtype_data;
 
-	/* Get number of chip selects, either platform data or OF */
-	if (mxc_platform_info) {
-		master->num_chipselect = mxc_platform_info->num_chipselect;
-		if (mxc_platform_info->chipselect) {
-			master->cs_gpios = devm_kcalloc(&master->dev,
-				master->num_chipselect, sizeof(int),
-				GFP_KERNEL);
-			if (!master->cs_gpios)
-				return -ENOMEM;
-
-			for (i = 0; i < master->num_chipselect; i++)
-				master->cs_gpios[i] = mxc_platform_info->chipselect[i];
+	master->cs_gpios = devm_kzalloc(&master->dev,
+			sizeof(int) * master->num_chipselect, GFP_KERNEL);
+
+	if (!spi_imx->slave_mode) {
+		if (!master->cs_gpios) {
+			dev_err(&pdev->dev, "No CS GPIOs available\n");
+			ret = -EINVAL;
+			goto out_master_put;
 		}
-	} else {
-		u32 num_cs;
 
-		if (!of_property_read_u32(np, "num-cs", &num_cs))
-			master->num_chipselect = num_cs;
-		/* If not preset, default value of 1 is used */
+		for (i = 0; i < master->num_chipselect; i++) {
+			int cs_gpio = of_get_named_gpio(np, "cs-gpios", i);
+			if (!gpio_is_valid(cs_gpio) && mxc_platform_info)
+				cs_gpio = mxc_platform_info->chipselect[i];
+
+			master->cs_gpios[i] = cs_gpio;
+			if (!gpio_is_valid(cs_gpio))
+				continue;
+
+			ret = devm_gpio_request(&pdev->dev, master->cs_gpios[i],
+						DRIVER_NAME);
+			if (ret) {
+				dev_err(&pdev->dev, "Can't get CS GPIO %i\n",
+					master->cs_gpios[i]);
+				goto out_master_put;
+			}
+		}
 	}
 
 	spi_imx->bitbang.chipselect = spi_imx_chipselect;
@@ -1967,29 +1869,6 @@ static int spi_imx_probe(struct platform_device *pdev)
 		goto out_clk_put;
 	}
 
-	/* Request GPIO CS lines, if any */
-	if (!spi_imx->slave_mode && master->cs_gpios) {
-		if (!spi_imx->idle_state_provided)
-			num_cs = master->num_chipselect;
-		for (i = 0; i < num_cs; i++) {
-			if (!gpio_is_valid(master->cs_gpios[i])) {
-				if (master->cs_gpios[i] == -EPROBE_DEFER) {
-					ret = -EPROBE_DEFER;
-					goto out_spi_bitbang;
-				}
-				continue;
-			}
-
-			ret = devm_gpio_request(&pdev->dev,
-						master->cs_gpios[i],
-						DRIVER_NAME);
-			if (ret) {
-				dev_err(&pdev->dev, "Can't get CS GPIO %i\n",
-					master->cs_gpios[i]);
-				goto out_spi_bitbang;
-			}
-		}
-	}
 	if (spi_imx->idle_state_provided) {
 		spi_imx->current_state = ~spi_imx->idle_state &
 			((1 << num_cs) - 1);
@@ -2002,8 +1881,6 @@ static int spi_imx_probe(struct platform_device *pdev)
 	clk_disable_unprepare(spi_imx->clk_per);
 	return ret;
 
-out_spi_bitbang:
-	spi_bitbang_stop(&spi_imx->bitbang);
 out_clk_put:
 	clk_disable_unprepare(spi_imx->clk_ipg);
 out_put_per:
@@ -2072,7 +1949,7 @@ static struct platform_driver spi_imx_driver = {
 };
 module_platform_driver(spi_imx_driver);
 
-MODULE_DESCRIPTION("SPI Controller driver");
+MODULE_DESCRIPTION("SPI Master Controller driver");
 MODULE_AUTHOR("Sascha Hauer, Pengutronix");
 MODULE_LICENSE("GPL");
 MODULE_ALIAS("platform:" DRIVER_NAME);
-- 
2.26.2

