From cc7ce108681503489c221229f17b54c9816ddc6d Mon Sep 17 00:00:00 2001
From: Sascha Dierberg <dierberg@dresearch-fe.de>
Date: Fri, 18 Nov 2016 12:58:08 +0100
Subject: [PATCH] DCIC ioctl improved to get real checksums HYP-16117

Signed-off-by: Sascha Dierberg <dierberg@dresearch-fe.de>
---
 drivers/video/mxc/mxc_dcic.c  | 28 +++++++++++++++++++++++++---
 include/linux/mxc_dcic.h      |  1 +
 include/uapi/linux/mxc_dcic.h |  1 +
 3 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/drivers/video/mxc/mxc_dcic.c b/drivers/video/mxc/mxc_dcic.c
index 8cf909d..045cee1 100644
--- a/drivers/video/mxc/mxc_dcic.c
+++ b/drivers/video/mxc/mxc_dcic.c
@@ -59,6 +59,8 @@
 #define FB_SYNC_OE_LOW_ACT		0x80000000
 #define FB_SYNC_CLK_LAT_FALL	0x40000000
 
+
+
 static const struct dcic_mux imx6q_dcic0_mux[] = {
 	{
 		.dcic = DCIC_IPU1_DI0,
@@ -304,9 +306,7 @@ static irqreturn_t dcic_irq_handler(int irq, void *data)
 	writel(dcics, &dcic->regs->dcics);
 
 	for (i = 0; i < 16; i++) {
-		printk(KERN_INFO "ROI=%d,crcRS=0x%x, crcCS=0x%x\n", i,
-				readl(&dcic->regs->ROI[i].dcicrrs),
-				readl(&dcic->regs->ROI[i].dcicrcs));
+		dcic->ROI_rcs[i] = readl(&dcic->regs->ROI[i].dcicrcs);
 	}
 	complete(&dcic->roi_crc_comp);
 
@@ -396,6 +396,9 @@ static long dcic_ioctl(struct file *file,
 	case DCIC_IOC_CONFIG_DCIC:
 		if (!copy_from_user(&sync, argp, sizeof(unsigned int)))
 			dcic_configure(dcic, sync);
+
+		dcic_enable(dcic);
+
 		break;
 	case DCIC_IOC_CONFIG_ROI:
 		if (copy_from_user(&roi_param, argp, sizeof(roi_param)))
@@ -427,6 +430,25 @@ static long dcic_ioctl(struct file *file,
 		}
 		dcic_disable(dcic);
 		break;
+	case DCIC_IOC_GET_CRCS:
+		init_completion(&dcic->roi_crc_comp);
+		dcic_enable(dcic);
+		dcic->result = 0;
+		msleep(25);
+		dcic_int_enable(dcic);
+		ret = wait_for_completion_interruptible_timeout(&dcic->roi_crc_comp, 1 * HZ);
+							
+		if (ret == 0) {
+			dev_err(dcic->dev,
+			"dcic wait for roi crc cal timeout\n");
+			ret = -ETIME;
+		}
+		else if (copy_to_user(argp, &dcic->ROI_rcs, sizeof(dcic->ROI_rcs)))
+			ret = -EFAULT;
+		else
+			ret = 0;
+		dcic_disable(dcic);
+		break;
 	default:
 		printk(KERN_ERR "%s, Unsupport cmd %d\n", __func__, cmd);
 		break;
diff --git a/include/linux/mxc_dcic.h b/include/linux/mxc_dcic.h
index 9f0ebc5..f2aec63 100644
--- a/include/linux/mxc_dcic.h
+++ b/include/linux/mxc_dcic.h
@@ -130,5 +130,6 @@ struct dcic_data {
 	struct cdev cdev;	/* Char device structure */
 	dev_t devt;
 	unsigned int result;
+	u32 ROI_rcs[16];
 };
 #endif
diff --git a/include/uapi/linux/mxc_dcic.h b/include/uapi/linux/mxc_dcic.h
index cbcacaa..4077cb8 100644
--- a/include/uapi/linux/mxc_dcic.h
+++ b/include/uapi/linux/mxc_dcic.h
@@ -33,6 +33,7 @@
 #define DCIC_IOC_CONFIG_DCIC	_IO('D', 12)
 #define DCIC_IOC_CONFIG_ROI		_IO('D', 13)
 #define DCIC_IOC_GET_RESULT		_IO('D', 14)
+#define DCIC_IOC_GET_CRCS 		_IO('D', 15)
 
 struct roi_params {
 	unsigned int roi_n;
-- 
2.6.6

