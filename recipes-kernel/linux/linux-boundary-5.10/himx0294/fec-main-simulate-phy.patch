From c5c84df51f8be189051b948106942da87cce1fd2 Mon Sep 17 00:00:00 2001
From: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
Date: Mon, 20 Jan 2020 16:06:19 +0100
Subject: [PATCH] net: fec_main: Simulate phy

On himx0294 boards fec is direct connected with a switch. And there is no phy.
Add a fixed phy, which simulate a 1000Mbit/s full duplex connection on ivap and
imoc boards and a 100Mbit/s connection on dvrec boards.
Do not disable reference clock if it is needed by the switch.

Signed-off-by: Mario Schuknecht <mario.schuknecht@dresearch-fe.de>
---
 drivers/net/ethernet/freescale/fec_main.c | 132 +++++++++++++++++++++++++++++-
 1 file changed, 130 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index 5fdb87c85366..515076017d12 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -2010,6 +2010,111 @@ static int fec_enet_mdio_write(struct mii_bus *bus, int mii_id, int regnum,
 	return ret;
 }
 
+#define SMI_PHY_COMMAND_REGISTER 0x18
+#define SMI_PHY_DATA_REGISTER    0x19
+#define MARVELL_GLOBAL2_ADDR 0x1C
+#define SMI_BUSY_BIT 15
+
+static int is_direct_switch = 0;
+static int detect_switch = 1;
+static int imx6_generate_enet_ref_clk = 0;
+
+static u16 fixed_regs[32] = {
+       0x1140, /* 0x0 MII_BMCR */
+       0x796D, /* 0x1 MII_BMSR */
+       0x1234, /* 0x2 MII_PHYSID1 */
+       0x5678, /* 0x3 MII_PHYSID2 */
+       0x05E1, /* 0x4 MII_ADVERTISE */
+       0xC5E1, /* 0x5 MII_LPA */
+       0, 0, 0,
+       0x0E00, /* 0x9 MII_CTRL1000 */
+       0x7800, /* 0xa MII_STAT1000 */
+       0, 0, 0, 0,
+       0x3000, /* 0xf MII_ESTATUS */
+};
+
+static void detect_direct_switch(struct mii_bus *bus)
+{
+	int val;
+
+	val = fec_enet_mdio_read(bus, 0x10, 3);
+	if(((val & 0xfff0) == 0x1760) || ((val & 0xfff0) == 0x1720)) {
+		pr_info("fec: Marvell switch detected\n");
+		is_direct_switch = 1;
+		return;
+	}
+	pr_info("fec: No switch detected\n");
+	is_direct_switch = 0;
+}
+
+static int my_fec_enet_mdio_read(struct mii_bus *bus, int phyaddr, int phyreg)
+{
+	int data = 0;
+
+	if(detect_switch) {
+		detect_direct_switch(bus);
+		detect_switch = 0;
+	}
+
+	if(!is_direct_switch) {
+		return fec_enet_mdio_read(bus, phyaddr, phyreg);
+	}
+
+	if(0 == phyaddr) {
+		/* PHY fake */
+		data = fixed_regs[phyreg & 0x1F];
+	} else if(phyaddr & 0x8000) {
+		int cmd = 0x9800;
+		cmd |= ((phyaddr & 0x1F) << 5);
+		cmd |= (phyreg & 0x1F);
+		fec_enet_mdio_write(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_COMMAND_REGISTER, cmd);
+
+		for (;;) {
+			if (!(fec_enet_mdio_read(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_COMMAND_REGISTER) &
+						(1 << SMI_BUSY_BIT))) {
+				break;
+			}
+		}
+		data = fec_enet_mdio_read(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_DATA_REGISTER);
+	} else {
+		data = fec_enet_mdio_read(bus, phyaddr & 0x7fff, phyreg);
+	}
+	return data;
+}
+
+static int my_fec_enet_mdio_write(struct mii_bus *bus, int phyaddr, int phyreg, u16 phydata)
+{
+	if(detect_switch) {
+		detect_direct_switch(bus);
+		detect_switch = 0;
+	}
+
+	if(!is_direct_switch) {
+		return fec_enet_mdio_write(bus, phyaddr, phyreg, phydata);
+	}
+
+	if(0 == phyaddr) {
+		/* PHY fake: nothing to do */
+	} else if(phyaddr & 0x8000) {
+		int cmd = 0x9400;
+
+		cmd |= ((phyaddr & 0x1F) << 5);
+		cmd |= (phyreg & 0x1F);
+
+		fec_enet_mdio_write(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_DATA_REGISTER, phydata);
+		fec_enet_mdio_write(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_COMMAND_REGISTER, cmd);
+		for (;;) {
+			if (!(fec_enet_mdio_read(bus, MARVELL_GLOBAL2_ADDR, SMI_PHY_COMMAND_REGISTER) &
+						(1 << SMI_BUSY_BIT))) {
+				break;
+			}
+		}
+	} else {
+		fec_enet_mdio_write(bus, phyaddr & 0x7fff, phyreg, phydata);
+	}
+	return 0;
+}
+
 static int fec_enet_clk_enable(struct net_device *ndev, bool enable)
 {
 	struct fec_enet_private *fep = netdev_priv(ndev);
@@ -2039,6 +2144,17 @@ static int fec_enet_clk_enable(struct net_device *ndev, bool enable)
 		if (ret)
 			goto failed_clk_2x_txclk;
 	} else {
+		/*
+		 * On some boards the imx6 generates a refence clock that is
+		 * used e.g. by a ethernet network switch. If the reference
+		 * clock is disabled, the ethernet network switch no longer
+		 * works. So we do not disable the reference clock on such
+		 * boards.
+		 */
+		if(imx6_generate_enet_ref_clk) {
+			return 0;
+		}
+
 		clk_disable_unprepare(fep->clk_enet_out);
 		if (fep->clk_ptp) {
 			mutex_lock(&fep->ptp_clk_mutex);
@@ -2237,8 +2353,8 @@ static int fec_enet_mii_init(struct platform_device *pdev)
 		fep->mii_bus->read = fec_enet_mdio_read_bb;
 		fep->mii_bus->write = fec_enet_mdio_write_bb;
 	} else {
-		fep->mii_bus->read = fec_enet_mdio_read;
-		fep->mii_bus->write = fec_enet_mdio_write;
+		fep->mii_bus->read = my_fec_enet_mdio_read;
+		fep->mii_bus->write = my_fec_enet_mdio_write;
 	}
 	snprintf(fep->mii_bus->id, MII_BUS_ID_SIZE, "%s-%x",
 		pdev->name, fep->dev_id + 1);
@@ -3828,6 +3944,18 @@ fec_probe(struct platform_device *pdev)
 	}
 	fep->gd_mdio = gd;
 
+	if (of_get_property(np, "direct-switch-lan9354", NULL)) {
+		pr_info("fec: LAN9354 switch\n");
+		fixed_regs[0x0] = 0x3100;
+		fixed_regs[0x1] = 0x782D;
+		fixed_regs[0x4] = 0x0DE1;
+		fixed_regs[0x9] = 0xFFFF;
+		fixed_regs[0xa] = 0xFFFF;
+		is_direct_switch = 1;
+		detect_switch = 0;
+		imx6_generate_enet_ref_clk = 1;
+	}
+
 	if (of_get_property(np, "fsl,magic-packet", NULL))
 		fep->wol_flag |= FEC_WOL_HAS_MAGIC_PACKET;
 
-- 
2.16.4

